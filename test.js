describe("pow", function() {

    describe("возводит x в степень 3", function() {
  
      function makeTest(x) {
        let expected = x * x * x;
        it(`${x} в степени 3 будет ${expected}`, function() {
          assert.equal(pow(x, 3), expected);
        });
      }
  
      for (let x = 1; x <= 5; x++) {
        makeTest(x);
      }
  
    });
  
    // ... другие тесты. Можно писать и describe, и it блоки.
  });
// Спецификация состоит из трёх основных блоков:

// describe("заголовок", function() { ... })
// Какую функциональность мы описываем. В нашем случае мы описываем функцию pow. Используется для группировки рабочих лошадок – блоков it.

// it("описание", function() { ... })
// В первом аргументе блока it мы человеческим языком описываем конкретный способ использования функции,
// а во втором – пишем функцию, которая тестирует данный случай.

// assert.equal(value1, value2)
// Код внутри блока it, если функция работает верно, должен выполняться без ошибок.
// Группировка производится вложенными блоками describe

// before/after и beforeEach/afterEach
// Мы можем задать before/after функции, которые будут выполняться до/после тестов, а также функции beforeEach/afterEach, выполняемые до/после каждого it.

// Например:

// describe("тест", function() {

//   before(() => alert("Тестирование началось – перед тестами"));
//   after(() => alert("Тестирование закончилось – после всех тестов"));

//   beforeEach(() => alert("Перед тестом – начинаем выполнять тест"));
//   afterEach(() => alert("После теста – заканчиваем выполнение теста"));

//   it('тест 1', () => alert(1));
//   it('тест 2', () => alert(2));

// });
// Порядок выполнения будет таким:

// Тестирование началось – перед тестами (before)
// Перед тестом – начинаем выполнять тест (beforeEach)
// 1
// После теста – заканчиваем выполнение теста (afterEach)
// Перед тестом – начинаем выполнять тест (beforeEach)
// 2
// После теста – заканчиваем выполнение теста (afterEach)
// Тестирование закончилось – после всех тестов (after)

// Расширение спецификации
describe("pow", function() {

    // ...
  
    it("для отрицательных n возвращает NaN", function() {
      assert.isNaN(pow(2, -1));
    });
  
    it("для дробных n возвращает NaN", function() {
      assert.isNaN(pow(2, 1.5));
    });
  
  });

  // Задачи
  // Что не так с этим тестом?
  // Что не так в нижеприведённом тесте функции pow?
  
  // it("Возводит x в степень n", function() {
  //   let x = 5;
  
  //   let result = x;
  //   assert.equal(pow(x, 1), result);
  
  //   result *= x;
  //   assert.equal(pow(x, 2), result);
  
  //   result *= x;
  //   assert.equal(pow(x, 3), result);
  // });
  // P.S. Тест не содержит синтаксических ошибок и успешно проходит.